name: Backend CI/CD

on:
  push:
    branches:
      - main
      - dev
      - beDev
  pull_request:
    branches:
      - main
      - dev
      - beDev

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'zulu'
      - name: Grant execute permission for gradlew and build with Gradle
        run: |
          cd Server
          chmod +x gradlew
          ./gradlew build
      - name: Docker build
        run: |
          cd Server
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
          docker build -t server . 
          docker tag server sksjsksh32/server:${GITHUB_SHA::7}
          docker push sksjsksh32/server:${GITHUB_SHA::7}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Start Session Manager session
        run: aws ssm start-session --target i-081308d2b0131d2d1
      - name: Deploy to Server
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2
        run: |
          aws ssm send-command \
            --instance-ids i-081308d2b0131d2d1 \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              'if sudo docker ps -a --format \\'{{.Names}}\\' | grep -q \'^server$\\'; then',
              '  sudo docker stop server',
              '  sudo docker rm server',
              'fi',
              'sudo docker pull sksjsksh32/server:${GITHUB_SHA::7}',
              'sudo docker tag sksjsksh32/server:${GITHUB_SHA::7} server',
              'sudo docker image rm sksjsksh32/server:${GITHUB_SHA::7}',
              'sudo docker image prune -f',
              'sudo docker run -d --name server -e SPRING_PROFILES_ACTIVE=production -e spring.datasource.username=${{ secrets.DATASOURCE_USERNAME }} -e spring.datasource.password=${{ secrets.DATASOURCE_PASSWORD }} -e spring.security.oauth2.client.registration.google.client-id=${{ secrets.GOOGLE_CLIENT_ID }} -e spring.security.oauth2.client.registration.google.client-secret=${{ secrets.GOOGLE_CLIENT_SECRET }} -e spring.security.oauth2.client.registration.github.client-id=${{ secrets.DGITHUB_CLIENT_ID }} -e spring.security.oauth2.client.registration.github.client-secret=${{ secrets.DGITHUB_CLIENT_SECRET }} -e spring.security.oauth2.client.registration.kakao.client-id=${{ secrets.KAKAO_CLIENT_ID }} -e spring.security.oauth2.client.registration.kakao.client-secret=${{ secrets.KAKAO_CLIENT_SECRET }} -p 80:8080 backend'
            ]" \
            --output text
